[ base: flush or reopen snrf socket in case of error ]
in case of read error, reopen or flush the snrf socket

[ proto: security token against reply attacks ]
replay protection is enabled in the nodl_id, per message.
it is disabled by default. to implement it, a 32 bits token
is used as a time variable data. the base periodically sends
a token to the node using encrypted message and randomized
contents (for instance: packet xored with node seed and padding
field all randomized). The token can then be used SET_TOKEN
is an internal BANO key, node handled by the application.

[ proto: security, randomized the unused field ]
randomizing the unused fields of encrypted packets is a good
practice as it results in different packet, thus less prone
to pattern based attacks.

[ node: more BANO_CONFIG_xxx to reduce size ]
features should be statically disablable, via BANO_CONFIG_xxx

[ node: per message encryption ]
for GET handler, BANO_MSG_FLAG_ENC could be returned enabling
message encryption. For timer handlers, add bano_make_set_enc_msg

[ node: make the alarm node PCB ]
think larger, used for prototyping

[ node: make the NRF USB dongle PCB ]
should be at the same time a USB dongle, and a SPI cape

[ node: power measurment ]
measure how much power needed to send a message, deduce node
current consumption profile. use UIL

[ node: dynamic feature disabling ]
node should be able to disable features in its own handlers.
for instance, the alarm may want to wait for 1 message (one for
the key), and THEN no longer listen at all

[ base: message checks ]
if node->flags & cipher and decoded or clear message flags
are not consistent, error.

[ base: dynamic nodes ]
